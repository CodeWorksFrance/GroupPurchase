app.get('/users', async (request, response) =>
{
    try{
        const users = await userRepository.retrieveUsersP()
        response.render("users", { users: users })
    }
    catch(error) {
    response.render("users", { users: users })
    }
})
...
UserRepository = class {
    retrieveUsersP = async () => {
        await this.dataTransfer.retrieveUsersP().then( result => {
            return result
        }).catch( error => {
            throw new Error(error)
        })
    }
...
DataTransfer = class {
   constructor(pool) {
       this.pool = pool
   }
    retrieveUsersP = () => {
        return new Promise( (resolve, reject) => {
            this.pool.query('SELECT * FROM Users ORDER BY Name ASC', (error, result) => {
                const users = []
                if (!error) {
                    for (let i = 0; i < result.rows.length; i++) {
                        const user = {name: result.rows[i].name, birthDate: result.rows[i].birth_date}
                        users.push(user)
                    }
                    resolve(users)
                }
                reject(error)
            })
        })
    }
...
